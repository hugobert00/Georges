import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime, timedelta
from matplotlib.backends.backend_pdf import PdfPages
import os

# Dictionnaire des noms des matières
noms_matiere = {
    "ZC=F": "Corn Futures",
    "KE=F": "KC HRW Wheat Futures",
    "ZW=F": "SRW Wheat",
    "ZR=F": "Rough Rice Futures",
    "ZM=F": "Soybean Meal Futures",
    "ZL=F": "Soybean Oil Futures",
    "ZS=F": "Soybean Futures"
}

# Liste des tickers
panier = ["ZC=F", "KE=F", "ZR=F", "ZM=F", "ZL=F", "ZS=F", "ZW=F"]

# Définir les dates de début et de fin
end_date = datetime.today()
start_date = end_date - timedelta(days=950)

# Définir le chemin complet pour enregistrer le fichier PDF
output_directory = os.path.expanduser('~/Desktop/Georges_analyst/Commo')
output_file = os.path.join(output_directory, 'matiere_premieres_analysis.pdf')

# Assurez-vous que le répertoire existe
os.makedirs(output_directory, exist_ok=True)

# Créer un objet PdfPages pour enregistrer les figures dans un PDF
with PdfPages(output_file) as pdf:
    # Fonction pour tracer les moyennes mobiles et identifier les croisements
    def plot_moving_averages(ticker, name):
        df = yf.download(ticker, start=start_date.strftime('%Y-%m-%d'), end=end_date.strftime('%Y-%m-%d'), interval='1d')

        # Calcul des moyennes mobiles
        df['SMA50'] = df['Close'].rolling(window=50).mean()
        df['SMA200'] = df['Close'].rolling(window=200).mean()

        # Identifier les croisements
        df['Signal'] = np.where(df['SMA50'] > df['SMA200'], 1, 0)  # 1 pour signal haussier
        df['Position'] = df['Signal'].diff()  # Différence pour identifier les croisements

        # Tracer les cours et les moyennes mobiles
        plt.figure(figsize=(14, 7))
        plt.plot(df['Close'], label='Cours', color='black')
        plt.plot(df['SMA50'], label='SMA 50', color='blue', linestyle='--')
        plt.plot(df['SMA200'], label='SMA 200', color='red', linestyle='--')

        # Tracer les signaux de croisement avec dates
        golden_cross_dates = df[df['Position'] == 1].index
        death_cross_dates = df[df['Position'] == -1].index

        plt.plot(golden_cross_dates, df['SMA50'][df['Position'] == 1], '^', color='green', markersize=12, label='Golden Cross (Haussier)')
        plt.plot(death_cross_dates, df['SMA50'][df['Position'] == -1], 'v', color='red', markersize=12, label='Death Cross (Baissier)')

        # Ajouter les dates des croisements en légende avec un espacement plus large
        for date in golden_cross_dates:
            plt.annotate(date.strftime('%Y-%m-%d'), 
                         (date, df['SMA50'][date]), 
                         textcoords="offset points", 
                         xytext=(0,20),  # Augmenter l'espacement vertical
                         ha='center', 
                         fontsize=8, 
                         color='green')
        
        for date in death_cross_dates:
            plt.annotate(date.strftime('%Y-%m-%d'), 
                         (date, df['SMA50'][date]), 
                         textcoords="offset points", 
                         xytext=(0,-25),  # Augmenter l'espacement vertical
                         ha='center', 
                         fontsize=8, 
                         color='red')

        # Ajouter les étiquettes des dernières valeurs avec un décalage à droite
        last_close = df['Close'].iloc[-1]
        last_sma50 = df['SMA50'].iloc[-1]
        last_sma200 = df['SMA200'].iloc[-1]

        # Ajustement de la position en x pour décaler les étiquettes à droite
        x_offset = 15  # Ajustez cette valeur pour déplacer les étiquettes plus à droite

        plt.text(df.index[-1] + timedelta(days=x_offset), last_close, f'Close: {last_close:.2f}', 
                 color='black', fontsize=10, ha='left', va='center', bbox=dict(facecolor='white', alpha=0.5))
        plt.text(df.index[-1] + timedelta(days=x_offset), last_sma50, f'SMA 50: {last_sma50:.2f}', 
                 color='blue', fontsize=10, ha='left', va='center', bbox=dict(facecolor='white', alpha=0.5))
        plt.text(df.index[-1] + timedelta(days=x_offset), last_sma200, f'SMA 200: {last_sma200:.2f}', 
                 color='red', fontsize=10, ha='left', va='center', bbox=dict(facecolor='white', alpha=0.5))

        plt.title(f"{name} - Cours et Moyennes Mobiles avec Signaux de Croisement")
        plt.legend()

        # Enregistrer la figure courante dans le PDF
        pdf.savefig()
        plt.close()

    # Boucle sur chaque matière première pour générer les graphiques
    for ticker in panier:
        plot_moving_averages(ticker, noms_matiere[ticker])

print(f"Les graphiques ont été enregistrés dans le fichier '{output_file}'")

